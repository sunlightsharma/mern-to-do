pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        FRONTEND_IMAGE = 'spygram/frontend-image'
        BACKEND_IMAGE = 'spygram/backend-image'
	DATABASE_IMAGE = 'spygram/mongodata'
        FRONTEND_TAG = 'latest'
        BACKEND_TAG = 'latest'
	DATABASE_TAG = 'latest'
    }
    
    stages {
        stage("SCM") {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Spygram/mern-todo-app.git']])
            }
        }
        
        stage("Build Frontend") {
            steps {
                script {
                    dir('frontend') {
                        sh 'docker build -t $FRONTEND_IMAGE:$FRONTEND_TAG .'
                    }
                }
            }
        }
        
        stage("Build Backend") {
            steps {
                script {
                    dir('backend') {
                        sh 'docker build -t $BACKEND_IMAGE:$BACKEND_TAG .'
                    }
                }
            }
        }

	stage("Build Database") {
            steps {
                script {
                    dir('backend') {
                        sh 'docker build -t $DATABASE_IMAGE:$DATABASE_TAG .'
                    }
                }
            }
        }
        
        stage("Push Frontend Image") {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials-id') {
                        sh 'docker push $FRONTEND_IMAGE:$FRONTEND_TAG'
                    }
                }
            }
        }
        
        stage("Push Backend Image") {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials-id') {
                        sh 'docker push $BACKEND_IMAGE:$BACKEND_TAG'
                    }
                }
            }
        }

	stage("Push Database Image") {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials-id') {
                        sh 'docker push $DATABASE_IMAGE:$DATABASE_TAG'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
